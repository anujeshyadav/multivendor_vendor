{"version":3,"sources":["views/apps/freshlist/language/LanguagesList.js","axiosConfig.js"],"names":["i","LanguagesList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","_id","language_name","value","className","status","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","error","this","sm","onClick","history","push","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component","instance","axios","create","baseURL"],"mappings":"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","file":"static/js/244.313a4d7d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nclass LanguagesList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"SL\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 200,\r\n        filter: true,\r\n      },\r\n      {\r\n        headerName: \"Id\",\r\n        field: \"_id\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data._id}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"language_name\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.language_name}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      // {\r\n      //   headerName: \"Code\",\r\n      //   field: \"code\",\r\n      //   filter: true,\r\n      //   width: 150,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.code}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n\r\n      // {\r\n      //   headerName: \"Status\",\r\n      //   field: \"status\",\r\n      //   filter: true,\r\n      //   width: 150,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.shelf_life}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n\r\n      {\r\n        headerName: \"Default Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return params.value === \"true\" ? (\r\n            <div className=\"badge badge-pill badge-success\">\r\n              {params.status}\r\n            </div>\r\n          ) : params.value === \"false\" ? (\r\n            <div className=\"badge badge-pill badge-warning\">\r\n              {params.status}\r\n            </div>\r\n          ) : null;\r\n        },\r\n      },\r\n\r\n      // {\r\n      //   headerName: \"Action\",\r\n      //   field: \"action\",\r\n      //   filter: true,\r\n      //   width: 150,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.action}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n      // {\r\n      //   headerName: \"Actions\",\r\n      //   field: \"sortorder\",\r\n      //   field: \"transactions\",\r\n      //   width: 150,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div className=\"actions cursor-pointer\">\r\n      //         <Eye\r\n      //           className=\"mr-50\"\r\n      //           size=\"25px\"\r\n      //           color=\"green\"\r\n      //           onClick={() =>\r\n      //             history.push(`/app/customer/viewCustomer/${params.data._id}`)\r\n      //           }\r\n      //         />\r\n      //         <Edit\r\n      //           className=\"mr-50\"\r\n      //           size=\"25px\"\r\n      //           color=\"blue\"\r\n      //           onClick={() =>\r\n      //             history.push(\"/app/freshlist/category/editCategory\")\r\n      //           }\r\n      //         />\r\n      //         <Trash2\r\n      //           className=\"mr-50\"\r\n      //           size=\"25px\"\r\n      //           color=\"red\"\r\n      //           onClick={() => {\r\n      //             let selectedData = this.gridApi.getSelectedRows();\r\n      //             this.runthisfunction(params.data._id);\r\n      //             this.gridApi.updateRowData({ remove: selectedData });\r\n      //           }}\r\n      //         />\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n    ],\r\n  };\r\n  async componentDidMount() {\r\n    await axiosConfig.get(\"/admin/viewone_language\").then((response) => {\r\n      let rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n  async componentDidMount() {\r\n    await axiosConfig.get(\"/admin/language_list\").then((response) => {\r\n      const rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n  async runthisfunction(id) {\r\n    console.log(id);\r\n    await axiosConfig.get(`/admin/del_language/${id}`).then(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      console.log(rowData),\r\n      (\r\n        <Row className=\"app-user-list\">\r\n          <Col sm=\"12\"></Col>\r\n          <Col sm=\"12\">\r\n            <Card>\r\n              <Row className=\"m-2\">\r\n                <Col>\r\n                  <h1 sm=\"6\" className=\"float-left\">\r\n                    Language Table\r\n                  </h1>\r\n                </Col>\r\n                <Col>\r\n                  <Button\r\n                    className=\" btn btn-danger float-right\"\r\n                    onClick={() =>\r\n                      history.push(\"/app/freshlist/language/AddLanguage\")\r\n                    }\r\n                  >\r\n                    Add Language\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <CardBody>\r\n                {this.state.rowData === null ? null : (\r\n                  <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                    <ContextLayout.Consumer>\r\n                      {(context) => (\r\n                        <AgGridReact\r\n                          gridOptions={{}}\r\n                          rowSelection=\"multiple\"\r\n                          defaultColDef={defaultColDef}\r\n                          columnDefs={columnDefs}\r\n                          rowData={rowData}\r\n                          onGridReady={this.onGridReady}\r\n                          colResizeDefault={\"shift\"}\r\n                          animateRows={true}\r\n                          floatingFilter={false}\r\n                          pagination={true}\r\n                          paginationPageSize={this.state.paginationPageSize}\r\n                          pivotPanelShow=\"always\"\r\n                          enableRtl={context.state.direction === \"rtl\"}\r\n                        />\r\n                      )}\r\n                    </ContextLayout.Consumer>\r\n                  </div>\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default LanguagesList;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  // baseURL: \"http://35.154.86.59/api/admin\",\r\n\r\n  baseURL: \"http://35.154.225.110:5000\",\r\n});\r\n\r\nexport default instance;\r\n"],"sourceRoot":""}